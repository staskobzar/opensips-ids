#
# $Id$
#
# OpenSIPS residential configuration script
#     by OpenSIPS Solutions <team@opensips-solutions.com>
#
# This script was generated via "make menuconfig", from
#   the "Residential" scenario.
# You can enable / disable more features / functionalities by
#   re-generating the scenario with different options.#
#
# Please refer to the Core CookBook at:
#      http://www.opensips.org/Resources/DocsCookbooks
# for a explanation of possible statements, functions and parameters.
#

/*!
 * Global settings
 */

debug=3
log_stderror=no
log_facility=LOG_LOCAL5

fork=yes
children=4

auto_aliases=no

listen=udp:eth0:5060

disable_tcp=yes

#set module path
mpath="/opt/opensips/lib64/opensips/modules/"

/*!
 * Modules load
 */

loadmodule "signaling.so"                 # SIGNALING module
loadmodule "sl.so"                        # StateLess module
loadmodule "tm.so"                        # Transaction Module
loadmodule "mi_fifo.so"                   # FIFO Management Interface
loadmodule "rr.so"                        # Record Route Module
loadmodule "cachedb_redis.so"             # cache system with Redis
loadmodule "auth.so"                      # Authentication framework
loadmodule "maxfwd.so"                    # MAX ForWarD module
loadmodule "sipmsgops.so"                 # SIP MSG OPerationS module
loadmodule "uri.so"                       # URI module
loadmodule "usrloc.so"                    # USeR LOCation module
loadmodule "registrar.so"                 # REGISTRAR module
loadmodule "dialog.so"                    # Dialog awareness 
loadmodule "pike.so"                      # DOS protection

/*!
 * Modules parameters 
 */

modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")

# --- Transaction module
modparam("tm", "fr_timer", 5)
modparam("tm", "fr_inv_timer", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

# --- Record Route module
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 0)

# --- URI module
modparam("uri", "use_uri_table", 0)

# --- User Location module
modparam("usrloc", "db_mode",   0)

# --- Registrar module
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")

# --- Authentication modules
modparam("auth","username_spec","$avp(authuser)")
modparam("auth","password_spec","$avp(authpass)")
modparam("auth","calculate_ha1",1)

# --- CACHEDB_REDIS Module
modparam("cachedb_redis", "cachedb_url", "redis://127.0.0.1:6379/")

# --- Dialog
modparam("dialog", "cachedb_url", "redis://127.0.0.1:6379/")
modparam("dialog", "profiles_with_value", "auth")

# --- PIKE
modparam("pike", "check_route", "pike")

/*
 * Routing Logic
 */
route{
	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

  # Intruders detect
  route(intruders_detect);

	if (has_totag()) {
		# sequential request withing a dialog should
		# take the path determined by record-routing
		if (loose_route()) {
			
			if (is_method("BYE")) {
				setflag(ACC_DO); # do accounting ...
				setflag(ACC_FAILED); # ... even if the transaction fails
			} else if (is_method("INVITE")) {
				# even if in most of the cases is useless, do RR for
				# re-INVITEs alos, as some buggy clients do change route set
				# during the dialog.
				record_route();
			}

			# route it out to whatever destination was set by loose_route()
			# in $du (destination URI).
			route(relay);
		} else {
			
			if ( is_method("ACK") ) {
				if ( t_check_trans() ) {
					# non loose-route, but stateful ACK; must be an ACK after 
					# a 487 or e.g. 404 from upstream server
					t_relay();
					exit;
				} else {
					# ACK without matching transaction ->
					# ignore and discard
					exit;
				}
			}
			sl_send_reply("404","Not here");
		}
		exit;
	}

	# CANCEL processing
	if (is_method("CANCEL"))
	{
		if (t_check_trans())
			t_relay();
		exit;
	}

	t_check_trans();

	if ( !(is_method("REGISTER")  ) ) {
		if (!from_uri==myself) {
			# if caller is not local, then called number must be local
			if (!uri==myself) {
				send_reply("403","Rely forbidden");
				exit;
			}
		}
	}

	# preloaded route checking
	if (loose_route()) {
		xlog("L_ERR",
		"Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
		if (!is_method("ACK"))
			sl_send_reply("403","Preload Route denied");
		exit;
	}

  #------
  # challeng authentication, when failed 
  # set up auth profile for user 
	if (is_method("REGISTER"))
	{
    if(cache_fetch("redis","user:$tU",$avp(authpass))){
      $avp(authuser)  = $tU;
      if(!pv_www_authorize("")) {
        xlog("L_INFO","$ci|$rm| Challeng auth for user $avp(authuser)");
        # store tries for 30 sec
        # each new try would increase expire to another 30 sec
        cache_add("redis", "auth:$tU:tries",1,30);
        # check if limit of tries reached
        cache_counter_fetch("redis","auth:$tU:tries", $var(tries));
        xlog("L_INFO","$ci|$rm| Total tries for user $tU is $var(tries)");
        if($var(tries) > 10){
          # Intruder detected. 
          # Store user in cache to drop future packets until expire
          xlog("L_INFO","$ci|$rm| Tries limit reached. Intruder detected. Ban user for 10min.");
          cache_store("redis","intruder:$tU","$si", 600);
          sl_send_reply("403","Forbidden");
          exit;
        }
        www_challenge("", "0");
        exit;
      }
      if (!save("location")){
        sl_reply_error();
        xlog("L_ERR","$ci|$rm| Could not save location for user $tU");
      }else{
        xlog("L_INFO","$ci|$rm| User $tU location saved");
      }
    }else{
      xlog("L_INFO","$ci|$rm| User $tU does not exists. Stop here");
      sl_send_reply("404","User not found");
    }
    exit;
	}

	# record routing
	if (!is_method("REGISTER|MESSAGE"))
		record_route();

	# account only INVITEs
	if (is_method("INVITE")) {
    if(cache_fetch("redis","user:$fU",$avp(authpass))){
      $avp(authuser)  = $fU;
      if(!pv_proxy_authorize("")) {
        xlog("L_INFO","$ci|$rm| Challeng proxy auth for user $avp(authuser)");
        # store tries for 30 sec
        # each new try would increase expire to another 30 sec
        cache_add("redis", "auth:$fU:tries",1,30);
        # check if limit of tries reached
        cache_counter_fetch("redis","auth:$fU:tries", $var(tries));
        xlog("L_INFO","$ci|$rm| Total tries for user $fU is $var(tries)");
        if($var(tries) > 10){
          # Intruder detected. 
          # Store user in cache to drop future packets until expire
          xlog("L_INFO","$ci|$rm| Tries limit reached. Intruder detected. Ban user for 10min.");
          # store IP address to make sure we do not ban all contacts of AOR
          cache_store("redis","intruder:$fU","$si", 600);
          sl_send_reply("403","Forbidden");
          exit;
        }
        proxy_challenge("", "0");
        exit;
      }else{
        # clear cache in case of success
        cache_remove("redis", "auth:$fU:tries");
      }
    }else{
      xlog("L_INFO","$ci|$rm| User $tU does not exists. Stop here");
      sl_send_reply("403","Forbidden. Caller user invalid");
      exit;
    }
	}

	
	if (!uri==myself) {
		append_hf("P-hint: outbound\r\n"); 
		
		route(relay);
	}

	# requests for my domain
	
	if (is_method("PUBLISH|SUBSCRIBE"))
	{
		sl_send_reply("503", "Service Unavailable");
		exit;
	}

	if ($rU==NULL) {
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}

	# do lookup with method filtering
	if (!lookup("location","m")) {
		t_newtran();
		t_reply("404", "Not Found");
		exit;
	} 

	route(relay);
}


route[relay] {
	# for INVITEs enable some additional helper routes
	if (is_method("INVITE")) {
		t_on_branch("per_branch_ops");
		t_on_reply("handle_nat");
		t_on_failure("missed_call");
	}

	if (!t_relay()) {
		send_reply("500","Internal Error");
	};
	exit;
}


# Check if request should be banned
route[intruders_detect]{
  # cache db attribute name
  # using From header username for INVITE requests
  # and To header username for REGISTER
  if(is_method("REGISTER")){
    $var(attr) = "intruder:" + $tU;
  }else if(is_method("INVITE")){
    $var(attr) = "intruder:" + $fU;
  }else{
    # do not check other methods
    return(-1);
  }

  if(cache_fetch("redis","$var(attr)",$var(ipaddr))){
    # if user is stored in cache db as intruder
    # then check source IP address too, to avoid situation
    # when intruders compromise valid users already connected to system

    if($(si{ip.pton}) == $(var(ipaddr){ip.pton})){
      xlog("L_INFO","$ci|$rm| Intruder with IP $var(ipaddr) detected, $var(attr)");
      sl_send_reply("403","Forbidden");
      exit;
    }
  }
}

route[pike]{
  exit;
}


branch_route[per_branch_ops] {
	xlog("new branch at $ru\n");
}


onreply_route[handle_nat] {
	xlog("incoming reply\n");
}


failure_route[missed_call] {
	if (t_was_cancelled()) {
		exit;
	}

	# uncomment the following lines if you want to block client 
	# redirect based on 3xx replies.
	##if (t_check_status("3[0-9][0-9]")) {
	##t_reply("404","Not found");
	##	exit;
	##}
}

/* vim: set filetype=openser fen fdm=marker : */
